generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MEMBER
}

enum GENDER {
  FEMALE
  MALE
}

enum UserCategory {
  PUBLIC_SERVICE // GU prefix
  PRIVATE_SECTOR // PS prefix
  NON_PROFIT // NFP prefix
  RETIRED // RTD prefix
  CLINICS // CL prefix
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}

// Core User Model - Essential authentication and basic info
model User {
  id          String     @id @default(cuid())
  surname     String
  otherNames  String?
  name        String?
  nin         String?    @unique
  phone       String?    @unique
  email       String?    @unique
  image       String?
  role        UserRole   @default(MEMBER)
  password    String?
  status      UserStatus @default(PENDING)
  isVerified  Boolean    @default(false)
  token       String?
  resetExpiry DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  logs          UserLog[]
  refreshTokens RefreshToken[]
  profile       UserProfile?
  invites       Invite[]

  @@map("users")
}

// UserProfile Model - Extended member information
model UserProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Personal Information
  gender      GENDER?
  dateOfBirth DateTime?
  ninNumber   String?   @unique

  // Address Information
  homeAddress      String?
  workplaceAddress String?
  district         String?

  // Employment Information
  title          String?
  employeeNo     String?      @unique
  computerNumber String?
  presentSalary  Float?
  category       UserCategory @default(PUBLIC_SERVICE)

  // Membership Information
  memberNumber   String? @unique
  trackingNumber String? @unique
  lastStep       Int?

  // Location Relations
  voteNameId String?
  voteName   VoteName? @relation(fields: [voteNameId], references: [id])
  regionId   String?
  region     Region?   @relation(fields: [regionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberNumber])
  @@index([employeeNo])
  @@index([ninNumber])
  @@index([voteNameId])
  @@index([regionId])
  @@index([userId])
  @@map("user_profiles")
}

model UserLog {
  id        String   @id @default(cuid())
  name      String
  activity  String
  time      String
  ipAddress String?
  device    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([userId])
  @@map("user_logs")
}

model Region {
  id           String        @id @default(cuid())
  name         String        @unique
  coordinator  String
  contact      String?
  email        String?
  voteNames    VoteName[]
  userProfiles UserProfile[] // Changed from users to userProfiles
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("regions")
}

model VoteName {
  id           String        @id @default(cuid())
  code         Int           @unique
  name         String
  regionId     String
  region       Region        @relation(fields: [regionId], references: [id])
  userProfiles UserProfile[] // Changed from users to userProfiles
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("vote_names")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("refresh_tokens")
}

model Invite {
  id    String   @id @default(cuid())
  email String   @unique
  code  String   @unique
  role  UserRole

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  invitedBy String

  user User @relation(fields: [invitedBy], references: [id], onDelete: Cascade)

  @@index([invitedBy])
  @@map("invites")
}
